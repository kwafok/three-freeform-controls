{"version":3,"file":"three-freeform-controls.js","sources":["../src/utils/constants.ts","../src/primitives/cone.ts","../src/primitives/line.ts","../src/controls/handles/index.ts","../src/controls/index.ts","../src/controls/handles/translation.ts","../src/primitives/octahedron.ts","../src/controls/handles/rotation.ts","../src/controls/handles/pick.ts","../src/primitives/plane.ts","../src/controls/handles/pick-plane.ts","../src/controls/handles/rotation-eye.ts","../src/utils/events.ts","../src/utils/emmiter.ts","../node_modules/nanoevents/index.js","../src/utils/helper.ts","../src/utils/raycaster.ts","../src/controls-manager.ts"],"sourcesContent":["export const DEFAULT_LINE_HEIGHT = 1;\nexport const DEFAULT_RADIAL_SEGMENTS = 32;\n\nexport const DEFAULT_CONE_HEIGHT = 0.75;\nexport const DEFAULT_CONE_RADIUS = 0.3;\n\nexport const DEFAULT_OCTAHEDRON_RADIUS = 0.1;\n\nexport const DEFAULT_PLANE_WIDTH = 0.75;\nexport const DEFAULT_PLANE_HEIGHT = 0.75;\nexport const DEFAULT_PLANE_SEGMENTS = 32;\n\nexport const DEFAULT_RING_NUM_POINTS = 64;\nexport const DEFAULT_RING_RADIUS = 1;\n\nexport enum PICK_PLANE_OPACITY {\n  ACTIVE = 0.75,\n  INACTIVE = 0.3,\n}\n\nexport const DEFAULT_CONTROLS_SEPARATION = 1;\nexport const DEFAULT_ROTATION_RADIUS_SCALE = 1;\nexport const DEFAULT_EYE_ROTATION_SCALE = 1.25;\nexport const DEFAULT_PLANE_SIZE_SCALE = 0.75;\nexport const DEFAULT_TRANSLATION_DISTANCE_SCALE = 1;\n\nexport const DEFAULT_COLOR_ARROW = \"#f0ff00\";\nexport const DEFAULT_COLOR_RING = \"#f0ff00\";\nexport const DEFAULT_COLOR_PLANE = \"#f0ff00\";\nexport const DEFAULT_CONTROLS_OPACITY = 1;\n","import {\n  DEFAULT_CONE_HEIGHT,\n  DEFAULT_CONE_RADIUS,\n  DEFAULT_CONTROLS_OPACITY,\n  DEFAULT_RADIAL_SEGMENTS,\n} from \"../utils/constants\";\nimport { ConeGeometry, Mesh, MeshBasicMaterial } from \"three\";\n\nexport default class Cone extends Mesh {\n  constructor(color: string) {\n    super();\n    this.geometry = new ConeGeometry(\n      DEFAULT_CONE_RADIUS,\n      DEFAULT_CONE_HEIGHT,\n      DEFAULT_RADIAL_SEGMENTS\n    );\n    this.material = new MeshBasicMaterial({ color, depthTest: false });\n    this.material.transparent = true;\n    this.material.opacity = DEFAULT_CONTROLS_OPACITY;\n  }\n}\n","import { DEFAULT_CONTROLS_OPACITY } from \"../utils/constants\";\nimport { BufferGeometry, LineLoop, MeshBasicMaterial } from \"three\";\n\nexport default class Line extends LineLoop {\n  constructor(color: string, geometry: BufferGeometry) {\n    super();\n    this.geometry = geometry;\n    this.material = new MeshBasicMaterial({ color, depthTest: true });\n    this.material.transparent = true;\n    this.material.opacity = DEFAULT_CONTROLS_OPACITY;\n  }\n}\n","import { Group, Mesh, Vector3 } from \"three\";\n\n/**\n * Names for default handles\n */\nexport enum DEFAULT_HANDLE_GROUP_NAME {\n  /**\n   * name for default translation handle along the +ve x-axis\n   */\n  XPT = \"xpt_handle\",\n  /**\n   * name for default translation handle along the +ve y-axis\n   */\n  YPT = \"ypt_handle\",\n  /**\n   * name for default translation handle along the +ve z-axis\n   */\n  ZPT = \"zpt_handle\",\n  /**\n   * name for default translation handle along the -ve x-axis\n   */\n  XNT = \"xnt_handle\",\n  /**\n   * name for default translation handle along the -ve y-axis\n   */\n  YNT = \"ynt_handle\",\n  /**\n   * name for default translation handle along the -ve z-axis\n   */\n  ZNT = \"znt_handle\",\n  /**\n   * name for default rotation handle along the x-axis\n   */\n  XR = \"xr_handle\",\n  /**\n   * name for default rotation handle along the y-axis\n   */\n  YR = \"yr_handle\",\n  /**\n   * name for default rotation handle along the z-axis\n   */\n  ZR = \"zr_handle\",\n  /**\n   * name for default rotation handle in the eye-plane\n   */\n  ER = \"er_handle\",\n  /**\n   * name for default translation handle in the eye-plane\n   */\n  PICK = \"pick_handle\",\n  /**\n   * name for default translation handle in the xy plane\n   */\n  PICK_PLANE_XY = \"pick_plane_xy_handle\",\n  /**\n   * name for default translation handle in the yz plane\n   */\n  PICK_PLANE_YZ = \"pick_plane_yz_handle\",\n  /**\n   * name for default translation handle in the zx plane\n   */\n  PICK_PLANE_ZX = \"pick_plane_zx_handle\",\n}\n\n/**\n * Base class for all handles\n * @noInheritDoc\n */\nexport abstract class HandleGroup extends Group {\n  /**\n   * returns an array of all the interactive objects that form a handle;\n   * note that a handle can have non-interactive objects as well.\n   */\n  public abstract getInteractiveObjects(): Mesh[];\n\n  /**\n   * sets the color for the handle; this may involve setting colors for multiple\n   * constituent meshes that form the handle (interactive or non-interactive)\n   * @param color - hex code for the color\n   */\n  public abstract setColor(color: string): void;\n}\n\n/**\n * This class can be extended to create custom translation handles.\n * It requires setting the properties `parallel` and `up`.\n */\nexport abstract class TranslationGroup extends HandleGroup {\n  /**\n   * This is a unit vector that runs parallel to the direction of the translation handle.\n   * For example, in case of [[Controls.translationXP]], it is\n   * `THREE.Vector3(1,0,0)` (along the x-axis).\n   */\n  public abstract parallel: Vector3;\n  /**\n   * This is a unit vector that runs perpendicular to the direction of the translation handles.\n   * For example, in case of [[Controls.translationXP]], it is\n   * `THREE.Vector3(0,1,0)` (along the y-axis).\n   */\n  public up = new Vector3();\n}\n\n/**\n * This class can be extended to create custom rotation handles.\n * It requires setting the property `up`.\n */\nexport abstract class RotationGroup extends HandleGroup {\n  /**\n   * This is a unit vector that runs along the axis of the rotation handles.\n   * For example, in case of [[Controls.rotationX]], it is\n   * `THREE.Vector3(1,0,0)` (along the x-axis).\n   */\n  public up = new Vector3();\n}\n\n/**\n * This class can be extended to create custom pick handle (translates in eye-plane).\n */\nexport abstract class PickGroup extends HandleGroup {}\n\n/**\n * This class can be extended to create custom pick plane handles.\n * It requires setting the property `up`.\n */\nexport abstract class PickPlaneGroup extends HandleGroup {\n  /**\n   * This is a unit vector that is perpendicular to the plane handles.\n   * For example, in case of [[Controls.pickPlaneXY]], it is\n   * `THREE.Vector3(0,0,1)` (along the z-axis).\n   */\n  public up = new Vector3();\n}\n\nexport type IHandle = RotationGroup | TranslationGroup | PickGroup | PickPlaneGroup;\n","import {\n  DEFAULT_CONTROLS_SEPARATION,\n  DEFAULT_EYE_ROTATION_SCALE,\n  DEFAULT_PLANE_SIZE_SCALE,\n  DEFAULT_ROTATION_RADIUS_SCALE,\n  DEFAULT_TRANSLATION_DISTANCE_SCALE,\n} from \"../utils/constants\";\nimport Translation from \"./handles/translation\";\nimport Rotation from \"./handles/rotation\";\nimport Pick from \"./handles/pick\";\nimport PickPlane from \"./handles/pick-plane\";\nimport {\n  DEFAULT_HANDLE_GROUP_NAME,\n  IHandle,\n  PickGroup,\n  PickPlaneGroup,\n  RotationGroup,\n  TranslationGroup,\n} from \"./handles\";\nimport RotationEye from \"./handles/rotation-eye\";\nimport { Camera, Group, MathUtils, Mesh, Object3D, Quaternion, Vector3 } from \"three\";\n\nexport enum ANCHOR_MODE {\n  /**\n   * In this mode the Controls do not inherit the orientation of the object\n   * as it is rotated.\n   */\n  FIXED = \"fixed\",\n  /**\n   * In this mode the Controls rotate as the object is rotated.\n   */\n  INHERIT = \"inherit\",\n}\n\n/**\n * The first number is the unit limit allowed in the -ve direction.\n * The second number is the unit limit allowed in the +ve direction.\n *\n * All calculations are with respect to anchor position which is the object's\n * position when [[setTranslationLimit]] is called.\n * `{ x: [-1, 2], y: false, z: false }` - sets the translation limit to `-1` unit\n * in the -x-direction, `+2` units in the +x-direction, and no limit on the\n * y and z-direction.\n *\n * Setting the limit to `false` disables the limit in all directions.\n */\nexport interface TranslationLimit {\n  x: [number, number] | false;\n  y: [number, number] | false;\n  z: [number, number] | false;\n}\n\nexport interface IControlsOptions {\n  /**\n   * the anchor mode for the controls\n   * @default [[ANCHOR_MODE.FIXED]]\n   */\n  mode?: ANCHOR_MODE;\n  /**\n   * distance between the position of the object and the position of the\n   * handles (in case of translation handles), or the radius (in case of rotation handles),\n   * or the size of the plane (in case of plane handles)\n   * @default 0.5\n   */\n  separation?: number;\n  /**\n   * uses THREE.Mesh.computeBounds to set the separation; if separation\n   * is provided in addition to this option, it is added to the computed bounds\n   * @default false\n   */\n  useComputedBounds?: boolean;\n  /**\n   * the quaternion applied to the whole Controls instance (handles get rotated relatively)\n   * @default undefined\n   */\n  orientation?: {\n    x: number;\n    y: number;\n    z: number;\n    w: number;\n  };\n  /**\n   * hides other handles of a Controls instance when drag starts\n   * @default true\n   */\n  hideOtherHandlesOnDrag?: boolean;\n  /**\n   *  hides all other Controls instances when drag starts\n   *  @default true\n   */\n  hideOtherControlsInstancesOnDrag?: boolean;\n  /**\n   * displays the plane in which the drag interaction takes place\n   * (useful for debugging)\n   * @default false\n   */\n  showHelperPlane?: boolean;\n  /**\n   * enables damping for the controls\n   * @default true\n   */\n  isDampingEnabled?: boolean;\n  /**\n   * sets the scaling factor for the radius of rotation handles\n   * @default 1.0\n   */\n  rotationRadiusScale?: number;\n  /**\n   * sets the scaling factor for the radius of rotation handles in eye plane\n   * @default 1.25\n   */\n  eyeRotationRadiusScale?: number;\n  /**\n   * sets the width and height scale for the pick plane handles\n   * @default 0.75\n   */\n  pickPlaneSizeScale?: number;\n  /**\n   * sets the scaling for distance between translation handles' start and the\n   * center of the controls\n   * @default 1.0\n   */\n  translationDistanceScale?: number;\n  /**\n   * For translation handles: highlights the axis along which the object moves.\n   * For rotation handles: highlights the axis of rotation.\n   * Not available on other handles.\n   * @default true\n   */\n  highlightAxis?: boolean;\n  /**\n   * Enables snap to grid (nearest integer coordinate) for all translation type handles:\n   * [[TranslationGroup]], [[PickGroup]], and [[PickPlaneGroup]]\n   * @default { x: false, y: false, z: false }\n   */\n  snapTranslation?: {\n    x: boolean;\n    y: boolean;\n    z: boolean;\n  };\n}\n\n/**\n * Controls is the main class in this library.\n * It is a subclass of THREE.Group, so its properties like `position` and\n * `quaternion` can be modified as desired.\n * The `children` are the control handles (like `rotationX`).\n * All translations and rotations are setup with respect to the global coordinate system.\n * @noInheritDoc\n */\nexport default class Controls extends Group {\n  /**\n   * handle which translates the object in the eye-plane\n   */\n  public readonly pick: Pick;\n  /**\n   * handle which translates the object in XY plane\n   */\n  public readonly pickPlaneXY: PickPlane;\n  /**\n   * handle which translates the object in YZ plane\n   */\n  public readonly pickPlaneYZ: PickPlane;\n  /**\n   * handle which translates the object in ZX plane\n   */\n  public readonly pickPlaneZX: PickPlane;\n  /**\n   * handle which translates the object along the x-axis; displayed in the\n   * +ve x-axis direction\n   */\n  public readonly translationXP: Translation;\n  /**\n   * handle which translates the object along the y-axis; displayed in the\n   * +ve y-axis direction\n   */\n  public readonly translationYP: Translation;\n  /**\n   * handle which translates the object along the z-axis; displayed in the\n   * +ve z-axis direction\n   */\n  public readonly translationZP: Translation;\n  /**\n   * handle which translates the object along the x-axis; displayed in the\n   * -ve x-axis direction\n   */\n  public readonly translationXN: Translation;\n  /**\n   * handle which translates the object along the y-axis; displayed in the\n   * -ve y-axis direction\n   */\n  public readonly translationYN: Translation;\n  /**\n   * handle which translates the object along the z-axis; displayed in the\n   * -ve z-axis direction\n   */\n  public readonly translationZN: Translation;\n  /**\n   * handle which rotates the object along the x-axis\n   */\n  public readonly rotationX: Rotation;\n  /**\n   * handle which rotates the object along the y-axis\n   */\n  public readonly rotationY: Rotation;\n  /**\n   * handle which rotates the object along the z-axis\n   */\n  public readonly rotationZ: Rotation;\n  /**\n   * handle which rotates the object in the eye-plane\n   */\n  public readonly rotationEye: RotationEye;\n  private handleTargetQuaternion = new Quaternion();\n  private objectWorldPosition = new Vector3();\n  private objectTargetPosition = new Vector3();\n  private objectTargetQuaternion = new Quaternion();\n  private objectParentWorldPosition = new Vector3();\n  private objectParentWorldQuaternion = new Quaternion();\n  private objectParentWorldScale = new Vector3();\n  private deltaPosition = new Vector3();\n  private normalizedHandleParallelVectorCache = new Vector3();\n  private touch1 = new Vector3();\n  private touch2 = new Vector3();\n  private boundingSphereRadius = 0;\n  private dragStartPoint = new Vector3();\n  private dragIncrementalStartPoint = new Vector3();\n  private handles: Set<IHandle> = new Set();\n  private isBeingDraggedTranslation = false;\n  private isBeingDraggedRotation = false;\n  private dampingFactor = 0.8;\n  private readonly useComputedBounds: boolean;\n  private readonly separation: number;\n  private initialSelfQuaternion = new Quaternion();\n  private readonly minTranslationCache = new Vector3();\n  private readonly maxTranslationCache = new Vector3();\n  private readonly options: IControlsOptions;\n  private readonly mode: ANCHOR_MODE;\n  private readonly translationDistanceScale: number;\n  private readonly rotationRadiusScale: number;\n  private readonly eyeRotationRadiusScale: number;\n  private readonly pickPlaneSizeScale: number;\n  private translationLimit?: TranslationLimit | false = false;\n  private translationAnchor: Vector3 | null = null;\n\n  /**\n   * enables damping for the controls\n   * @default true\n   */\n  public isDampingEnabled: boolean;\n  /**\n   * hides other handles of a Controls instance when drag starts\n   * @default true\n   */\n  public hideOtherHandlesOnDrag: boolean;\n  /**\n   *  hides all other Controls instances when drag starts\n   *  @default true\n   */\n  public hideOtherControlsInstancesOnDrag: boolean;\n  /**\n   * displays the plane in which the drag interaction takes place\n   * (useful for debugging)\n   * @default false\n   */\n  public showHelperPlane: boolean;\n  /**\n   * For translation handles: highlights the axis along which the object moves.\n   * For rotation handles: highlights the axis of rotation.\n   * Not available on other handles.\n   * @default true\n   */\n  public highlightAxis: boolean;\n  /**\n   * Enables snap to grid (nearest integer coordinate) for all translation type handles:\n   * [[TranslationGroup]], [[PickGroup]], and [[PickPlaneGroup]]\n   * @default { x: false, y: false, z: false }\n   */\n  public snapTranslation: {\n    x: boolean;\n    y: boolean;\n    z: boolean;\n  };\n\n  /**\n   *\n   * @param object - the object provided by the user\n   * @param camera - the THREE.Camera instance used in the scene\n   * @param options\n   */\n  constructor(public object: Object3D, private camera: Camera, options?: IControlsOptions) {\n    super();\n\n    this.options = options || {};\n    this.mode = this.options?.mode ?? ANCHOR_MODE.FIXED;\n    this.hideOtherHandlesOnDrag = this.options?.hideOtherHandlesOnDrag ?? true;\n    this.hideOtherControlsInstancesOnDrag = this.options?.hideOtherControlsInstancesOnDrag ?? true;\n    this.showHelperPlane = this.options?.showHelperPlane ?? false;\n    this.highlightAxis = this.options?.highlightAxis ?? true;\n    this.useComputedBounds = this.options?.useComputedBounds ?? false;\n    this.snapTranslation = this.options?.snapTranslation ?? {\n      x: false,\n      y: false,\n      z: false,\n    };\n    this.separation = this.options?.separation ?? DEFAULT_CONTROLS_SEPARATION;\n    this.isDampingEnabled = this.options?.isDampingEnabled ?? true;\n    this.rotationRadiusScale = this.options?.rotationRadiusScale ?? DEFAULT_ROTATION_RADIUS_SCALE;\n    this.eyeRotationRadiusScale =\n      this.options?.eyeRotationRadiusScale ?? DEFAULT_EYE_ROTATION_SCALE;\n    this.pickPlaneSizeScale = this.options?.pickPlaneSizeScale ?? DEFAULT_PLANE_SIZE_SCALE;\n    this.translationDistanceScale =\n      this.options?.translationDistanceScale ?? DEFAULT_TRANSLATION_DISTANCE_SCALE;\n\n    if (this.options.orientation !== undefined) {\n      const { x, y, z, w } = this.options.orientation;\n      this.initialSelfQuaternion.set(x, y, z, w).normalize();\n      this.quaternion.copy(this.initialSelfQuaternion);\n    }\n\n    this.computeObjectBounds();\n\n    this.pick = new Pick();\n\n    this.pickPlaneXY = new PickPlane(\n      \"yellow\",\n      this.boundingSphereRadius * this.pickPlaneSizeScale,\n      this.boundingSphereRadius * this.pickPlaneSizeScale\n    );\n    this.pickPlaneYZ = new PickPlane(\n      \"cyan\",\n      this.boundingSphereRadius * this.pickPlaneSizeScale,\n      this.boundingSphereRadius * this.pickPlaneSizeScale\n    );\n    this.pickPlaneZX = new PickPlane(\n      \"pink\",\n      this.boundingSphereRadius * this.pickPlaneSizeScale,\n      this.boundingSphereRadius * this.pickPlaneSizeScale\n    );\n\n    this.translationXP = new Translation(\"red\");\n    this.translationYP = new Translation(\"green\");\n    this.translationZP = new Translation(\"blue\");\n\n    this.translationXN = new Translation(\"red\");\n    this.translationYN = new Translation(\"green\");\n    this.translationZN = new Translation(\"blue\");\n\n    this.rotationX = new Rotation(\"red\", this.boundingSphereRadius * this.rotationRadiusScale);\n    this.rotationY = new Rotation(\"green\", this.boundingSphereRadius * this.rotationRadiusScale);\n    this.rotationZ = new Rotation(\"blue\", this.boundingSphereRadius * this.rotationRadiusScale);\n\n    this.rotationEye = new RotationEye(\n      \"yellow\",\n      this.boundingSphereRadius * this.eyeRotationRadiusScale\n    );\n\n    this.setupDefaultTranslation();\n    this.setupDefaultRotation();\n    this.setupDefaultEyeRotation();\n    this.setupDefaultPickPlane();\n    this.setupDefaultPick();\n  }\n\n  private setupDefaultPickPlane = () => {\n    this.pickPlaneXY.name = DEFAULT_HANDLE_GROUP_NAME.PICK_PLANE_XY;\n    this.pickPlaneYZ.name = DEFAULT_HANDLE_GROUP_NAME.PICK_PLANE_YZ;\n    this.pickPlaneZX.name = DEFAULT_HANDLE_GROUP_NAME.PICK_PLANE_ZX;\n\n    this.pickPlaneYZ.up = new Vector3(1, 0, 0);\n    this.pickPlaneZX.up = new Vector3(0, 1, 0);\n    this.pickPlaneXY.up = new Vector3(0, 0, 1);\n\n    this.pickPlaneYZ.rotateY(Math.PI / 2);\n    this.pickPlaneZX.rotateX(Math.PI / 2);\n\n    this.setupHandle(this.pickPlaneXY);\n    this.setupHandle(this.pickPlaneYZ);\n    this.setupHandle(this.pickPlaneZX);\n  };\n\n  public setupHandle = (handle: IHandle) => {\n    this.handles.add(handle);\n    this.add(handle);\n  };\n\n  private setupDefaultPick = () => {\n    this.pick.name = DEFAULT_HANDLE_GROUP_NAME.PICK;\n    this.setupHandle(this.pick);\n  };\n\n  private setupDefaultEyeRotation = () => {\n    this.rotationEye.name = DEFAULT_HANDLE_GROUP_NAME.ER;\n    this.rotationEye.camera = this.camera;\n    this.setupHandle(this.rotationEye);\n  };\n\n  private setupDefaultTranslation = () => {\n    this.translationXP.name = DEFAULT_HANDLE_GROUP_NAME.XPT;\n    this.translationYP.name = DEFAULT_HANDLE_GROUP_NAME.YPT;\n    this.translationZP.name = DEFAULT_HANDLE_GROUP_NAME.ZPT;\n\n    this.translationXN.name = DEFAULT_HANDLE_GROUP_NAME.XNT;\n    this.translationYN.name = DEFAULT_HANDLE_GROUP_NAME.YNT;\n    this.translationZN.name = DEFAULT_HANDLE_GROUP_NAME.ZNT;\n\n    this.translationXP.translateX(this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationYP.translateY(this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationZP.translateZ(this.boundingSphereRadius * this.translationDistanceScale);\n\n    this.translationXN.translateX(-this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationYN.translateY(-this.boundingSphereRadius * this.translationDistanceScale);\n    this.translationZN.translateZ(-this.boundingSphereRadius * this.translationDistanceScale);\n\n    this.translationXP.rotateZ(-Math.PI / 2);\n    this.translationZP.rotateX(Math.PI / 2);\n\n    this.translationXN.rotateZ(Math.PI / 2);\n    this.translationYN.rotateX(Math.PI);\n    this.translationZN.rotateX(-Math.PI / 2);\n\n    this.translationXP.up = new Vector3(0, 1, 0);\n    this.translationYP.up = new Vector3(0, 0, 1);\n    this.translationZP.up = new Vector3(0, 1, 0);\n\n    this.translationXN.up = new Vector3(0, -1, 0);\n    this.translationYN.up = new Vector3(0, 0, -1);\n    this.translationZN.up = new Vector3(0, -1, 0);\n\n    this.translationXP.parallel = new Vector3(1, 0, 0);\n    this.translationYP.parallel = new Vector3(0, 1, 0);\n    this.translationZP.parallel = new Vector3(0, 0, 1);\n\n    this.translationXN.parallel = new Vector3(-1, 0, 0);\n    this.translationYN.parallel = new Vector3(0, -1, 0);\n    this.translationZN.parallel = new Vector3(0, 0, -1);\n\n    this.setupHandle(this.translationXP);\n    this.setupHandle(this.translationYP);\n    this.setupHandle(this.translationZP);\n\n    this.setupHandle(this.translationXN);\n    this.setupHandle(this.translationYN);\n    this.setupHandle(this.translationZN);\n  };\n\n  private setupDefaultRotation = () => {\n    this.rotationX.name = DEFAULT_HANDLE_GROUP_NAME.XR;\n    this.rotationY.name = DEFAULT_HANDLE_GROUP_NAME.YR;\n    this.rotationZ.name = DEFAULT_HANDLE_GROUP_NAME.ZR;\n\n    this.rotationX.up = new Vector3(1, 0, 0);\n    this.rotationY.up = new Vector3(0, 1, 0);\n    this.rotationZ.up = new Vector3(0, 0, 1);\n\n    this.rotationY.rotateX(Math.PI / 2);\n    this.rotationX.rotateY(Math.PI / 2);\n    this.rotationX.rotateZ(Math.PI);\n\n    this.setupHandle(this.rotationX);\n    this.setupHandle(this.rotationY);\n    this.setupHandle(this.rotationZ);\n  };\n\n  private computeObjectBounds = () => {\n    if (this.useComputedBounds) {\n      if (this.object.type === \"Mesh\") {\n        const geometry = (this.object as Mesh).geometry;\n        geometry.computeBoundingSphere();\n        const { boundingSphere } = geometry;\n        const radius = boundingSphere?.radius ?? 0;\n        this.boundingSphereRadius = radius / 2 + this.separation;\n        return;\n      } else {\n        console.warn(\n          `Bounds can only be computed for object of type THREE.Mesh,\n          received object with type: ${this.object.type}. Falling back to using\n          default separation.\n        `\n        );\n      }\n    }\n    this.boundingSphereRadius = this.separation;\n  };\n\n  /**\n   * Puts a limit on the object's translation anchored at the current position.\n   *\n   * `{ x: [-1, 2], y: false, z: false }` - sets the translation limit to `-1` unit\n   * in the -x-direction, `+2` units in the +x-direction, and no limit on the\n   * y and z-direction.\n   *\n   * Setting the limit to `false` disables the limit in all directions.\n   * @param limit\n   */\n  public setTranslationLimit = (limit: TranslationLimit | false) => {\n    this.translationLimit = limit;\n    this.translationAnchor = limit ? this.position.clone() : null;\n  };\n\n  /**\n   * @internal\n   */\n  processDragStart = (args: { point: Vector3; handle: IHandle }) => {\n    const { point, handle } = args;\n    this.dragStartPoint.copy(point);\n    this.dragIncrementalStartPoint.copy(point);\n    this.isBeingDraggedTranslation =\n      handle instanceof TranslationGroup ||\n      handle instanceof PickGroup ||\n      handle instanceof PickPlaneGroup;\n    this.isBeingDraggedRotation = handle instanceof RotationGroup;\n  };\n\n  /**\n   * @internal\n   */\n  processDragEnd = (args: { handle: IHandle }) => {\n    const { handle } = args;\n    const { x: xSnap, y: ySnap, z: zSnap } = this.snapTranslation;\n    const snap = [xSnap, ySnap, zSnap];\n    if (\n      handle instanceof TranslationGroup ||\n      handle instanceof PickPlaneGroup ||\n      handle instanceof PickGroup\n    ) {\n      const xyz = this.object.position.toArray();\n      const floor = xyz.map(Math.floor);\n      const ceil = xyz.map(Math.ceil);\n      const snapFloor = xyz.map((p, index) => ceil[index] - p >= p - floor[index]);\n      const position = xyz.map((p, index) => {\n        if (!snap[index]) {\n          return p;\n        }\n        return snapFloor[index] ? floor[index] : ceil[index];\n      });\n      this.object.position.fromArray(position);\n    }\n    this.isBeingDraggedTranslation = false;\n    this.isBeingDraggedRotation = false;\n  };\n\n  /**\n   * Only takes effect if [[IControlsOptions.isDampingEnabled]] is true.\n   * @param dampingFactor - value between 0 and 1, acts like a weight on the controls\n   */\n  public setDampingFactor = (dampingFactor = 0) =>\n    (this.dampingFactor = MathUtils.clamp(dampingFactor, 0, 1));\n\n  /**\n   * @internal\n   */\n  processDrag = (args: { point: Vector3; handle: IHandle; dragRatio?: number }) => {\n    const { point, handle, dragRatio = 1 } = args;\n    const k = Math.exp(-this.dampingFactor * Math.abs(dragRatio ** 3));\n\n    if (handle instanceof TranslationGroup) {\n      this.deltaPosition.copy(point).sub(this.dragIncrementalStartPoint);\n      this.normalizedHandleParallelVectorCache\n        .copy(handle.parallel.normalize())\n        .applyQuaternion(this.quaternion);\n\n      const delta = this.deltaPosition.dot(this.normalizedHandleParallelVectorCache);\n      this.deltaPosition\n        .copy(this.normalizedHandleParallelVectorCache)\n        .multiplyScalar(this.isDampingEnabled ? k * delta : delta);\n\n      this.position.copy(this.getLimitedTranslation(this.deltaPosition));\n    } else if (handle instanceof PickGroup || handle instanceof PickPlaneGroup) {\n      this.deltaPosition\n        .copy(point)\n        .sub(this.dragIncrementalStartPoint)\n        .multiplyScalar(this.isDampingEnabled ? k : 1);\n\n      this.position.copy(this.getLimitedTranslation(this.deltaPosition));\n    } else {\n      this.touch1.copy(this.dragIncrementalStartPoint).sub(this.objectWorldPosition).normalize();\n\n      this.touch2.copy(point).sub(this.objectWorldPosition).normalize();\n\n      this.handleTargetQuaternion.setFromUnitVectors(this.touch1, this.touch2);\n      if (this.mode === ANCHOR_MODE.FIXED) {\n        this.detachHandleUpdateQuaternionAttach(handle, this.handleTargetQuaternion);\n      }\n    }\n\n    this.objectTargetQuaternion.premultiply(this.handleTargetQuaternion);\n    this.dragIncrementalStartPoint.copy(point);\n  };\n\n  private getLimitedTranslation = (translation: Vector3) => {\n    const position = translation.add(this.position);\n    if (!this.translationAnchor || !this.translationLimit) {\n      return position;\n    }\n    const { x: xLimit, y: yLimit, z: zLimit } = this.translationLimit;\n    const { x: xAnchor, y: yAnchor, z: zAnchor } = this.translationAnchor;\n    const { x, y, z } = position;\n    this.minTranslationCache.set(\n      xLimit ? xAnchor + xLimit[0] : x,\n      yLimit ? yAnchor + yLimit[0] : y,\n      zLimit ? zAnchor + zLimit[0] : z\n    );\n    this.maxTranslationCache.set(\n      xLimit ? xAnchor + xLimit[1] : x,\n      yLimit ? yAnchor + yLimit[1] : y,\n      zLimit ? zAnchor + zLimit[1] : z\n    );\n    return position.clamp(this.minTranslationCache, this.maxTranslationCache);\n  };\n\n  private detachObjectUpdatePositionAttach = (parent: Object3D | null, object: Object3D) => {\n    if (parent !== null && this.parent !== null && this.parent.parent !== null) {\n      const scene = this.parent.parent;\n      if (scene.type !== \"Scene\") {\n        throw new Error(\"freeform controls must be attached to the scene\");\n      }\n      scene.attach(object);\n      object.position.copy(this.objectTargetPosition);\n      parent.attach(object);\n    }\n  };\n\n  private detachHandleUpdateQuaternionAttach = (handle: IHandle, quaternion: Quaternion) => {\n    if (this.parent !== null && this.parent.parent) {\n      const scene = this.parent.parent;\n      if (scene.type !== \"Scene\") {\n        throw new Error(\"freeform controls must be attached to the scene\");\n      }\n      scene.attach(handle);\n      handle.applyQuaternion(quaternion);\n      this.attach(handle);\n    }\n  };\n\n  /**\n   * Applies supplied visibility to the supplied handle names.\n   * Individual handle's visibility can also be changed by modifying the `visibility`\n   * property on the handle directly.\n   * @param handleNames\n   * @param visibility\n   */\n  public showByNames = (\n    handleNames: Array<DEFAULT_HANDLE_GROUP_NAME | string>,\n    visibility = true\n  ) => {\n    const handleNamesMap: { [name: string]: IHandle | undefined } = {};\n    this.handles.forEach((handle) => {\n      handleNamesMap[handle.name] = handle;\n    });\n    handleNames.map((handleName) => {\n      const handle = handleNamesMap[handleName];\n      if (handle === undefined) {\n        throw new Error(`handle: ${handleName} not found`);\n      }\n      handle.visible = visibility;\n    });\n  };\n\n  /**\n   * Applies supplied visibility to all handles\n   * @param visibility\n   */\n  public showAll = (visibility = true) => {\n    this.handles.forEach((handle) => {\n      handle.visible = visibility;\n    });\n  };\n\n  /**\n   * @internal\n   */\n  public getInteractiveObjects(): Object3D[] {\n    const interactiveObjects: Object3D[] = [];\n    this.handles.forEach((handle) => {\n      if (!handle.visible) {\n        return;\n      }\n      interactiveObjects.push(...handle.getInteractiveObjects());\n    });\n    return interactiveObjects;\n  }\n\n  /**\n   * @internal\n   */\n  updateMatrixWorld = (force?: boolean) => {\n    this.object.updateMatrixWorld(force);\n\n    this.object.getWorldPosition(this.objectWorldPosition);\n    const parent = this.object.parent;\n    if (parent !== null) {\n      parent.matrixWorld.decompose(\n        this.objectParentWorldPosition,\n        this.objectParentWorldQuaternion,\n        this.objectParentWorldScale\n      );\n    }\n    this.objectParentWorldQuaternion.invert();\n    this.objectTargetPosition.copy(this.position);\n    this.objectTargetQuaternion.premultiply(this.objectParentWorldQuaternion);\n\n    if (this.isBeingDraggedTranslation) {\n      this.detachObjectUpdatePositionAttach(parent, this.object);\n    } else if (this.isBeingDraggedRotation) {\n      this.object.quaternion.copy(this.objectTargetQuaternion);\n      this.detachObjectUpdatePositionAttach(parent, this.object);\n    } else {\n      this.position.copy(this.objectWorldPosition);\n    }\n\n    this.object.getWorldQuaternion(this.objectTargetQuaternion);\n    if (this.mode === ANCHOR_MODE.INHERIT && !this.isBeingDraggedTranslation) {\n      this.quaternion.copy(this.initialSelfQuaternion).premultiply(this.objectTargetQuaternion);\n    }\n\n    super.updateMatrixWorld(force);\n  };\n}\n","import { Vector3, BufferGeometry, Float32BufferAttribute, MeshBasicMaterial } from \"three\";\nimport Cone from \"../../primitives/cone\";\nimport {\n  DEFAULT_COLOR_ARROW,\n  DEFAULT_CONE_HEIGHT,\n  DEFAULT_CONE_RADIUS,\n  DEFAULT_LINE_HEIGHT,\n} from \"../../utils/constants\";\nimport Line from \"../../primitives/line\";\nimport { TranslationGroup } from \"./index\";\n\nexport default class Translation extends TranslationGroup {\n  private readonly cone: Cone;\n  private readonly line: Line;\n  public parallel = new Vector3(0, 1, 0);\n\n  constructor(color = DEFAULT_COLOR_ARROW) {\n    super();\n    this.cone = new Cone(color);\n    const lineGeometry = new BufferGeometry();\n    lineGeometry.setAttribute(\n      \"position\",\n      new Float32BufferAttribute([0, 0, 0, 0, DEFAULT_LINE_HEIGHT, 0], 3)\n    );\n\n    this.line = new Line(color, lineGeometry);\n    this.cone.geometry.scale(DEFAULT_CONE_RADIUS, DEFAULT_CONE_HEIGHT, DEFAULT_CONE_RADIUS);\n    this.cone.translateY(DEFAULT_LINE_HEIGHT);\n\n    this.add(this.cone);\n    this.add(this.line);\n  }\n\n  /**\n   * @internal\n   */\n  public getInteractiveObjects = () => {\n    return [this.cone];\n  };\n\n  public setColor = (color: string) => {\n    const coneMaterial = this.cone.material as MeshBasicMaterial;\n    const lineMaterial = this.line.material as MeshBasicMaterial;\n    coneMaterial.color.set(color);\n    lineMaterial.color.set(color);\n  };\n}\n","import { DEFAULT_OCTAHEDRON_RADIUS } from \"../utils/constants\";\nimport { DoubleSide, Mesh, MeshBasicMaterial, OctahedronGeometry } from \"three\";\n\nexport default class Octahedron extends Mesh {\n  constructor(color: string) {\n    super();\n    this.geometry = new OctahedronGeometry(DEFAULT_OCTAHEDRON_RADIUS, 0);\n    this.material = new MeshBasicMaterial({\n      color,\n      depthTest: false,\n      transparent: true,\n      side: DoubleSide,\n    });\n  }\n}\n","import { BufferGeometry, Float32BufferAttribute, MeshBasicMaterial } from \"three\";\nimport {\n  DEFAULT_COLOR_RING,\n  DEFAULT_RING_NUM_POINTS,\n  DEFAULT_RING_RADIUS,\n} from \"../../utils/constants\";\nimport Line from \"../../primitives/line\";\nimport Octahedron from \"../../primitives/octahedron\";\nimport { RotationGroup } from \"./index\";\n\nexport default class Rotation extends RotationGroup {\n  private readonly ring: Line;\n  private readonly handlebar: Octahedron;\n\n  constructor(color = DEFAULT_COLOR_RING, ringRadius = DEFAULT_RING_RADIUS) {\n    super();\n    const ringNumberOfPoints = DEFAULT_RING_NUM_POINTS;\n    const ringGeometry = new BufferGeometry();\n    const angle = (2 * Math.PI) / ringNumberOfPoints;\n    const vertices = [];\n    for (let i = 1; i < ringNumberOfPoints + 1; i++) {\n      vertices.push(ringRadius * Math.cos(i * angle), ringRadius * Math.sin(i * angle), 0);\n    }\n    ringGeometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    this.ring = new Line(color, ringGeometry);\n    this.handlebar = new Octahedron(color);\n    this.handlebar.position.y = ringRadius;\n    this.add(this.ring);\n    this.add(this.handlebar);\n  }\n\n  /**\n   * @internal\n   */\n  public getInteractiveObjects = () => {\n    return [this.handlebar];\n  };\n\n  public setColor = (color: string) => {\n    const ringMaterial = this.ring.material as MeshBasicMaterial;\n    const handlebarMaterial = this.handlebar.material as MeshBasicMaterial;\n    ringMaterial.color.set(color);\n    handlebarMaterial.color.set(color);\n  };\n}\n","import { MeshBasicMaterial } from \"three\";\nimport Octahedron from \"../../primitives/octahedron\";\nimport { PickGroup } from \"./index\";\n\nexport default class Pick extends PickGroup {\n  private readonly octahedron: Octahedron;\n\n  constructor() {\n    super();\n    this.octahedron = new Octahedron(\"white\");\n    this.add(this.octahedron);\n  }\n\n  /**\n   * @internal\n   */\n  public getInteractiveObjects = () => {\n    return [this.octahedron];\n  };\n\n  public setColor = (color: string) => {\n    const octahedronMaterial = this.octahedron.material as MeshBasicMaterial;\n    octahedronMaterial.color.set(color);\n  };\n}\n","import {\n  DEFAULT_COLOR_RING,\n  DEFAULT_PLANE_HEIGHT,\n  DEFAULT_PLANE_SEGMENTS,\n  DEFAULT_PLANE_WIDTH,\n  PICK_PLANE_OPACITY,\n} from \"../utils/constants\";\nimport { DoubleSide, Mesh, MeshBasicMaterial, PlaneGeometry } from \"three\";\n\nexport default class Plane extends Mesh {\n  constructor(\n    color = DEFAULT_COLOR_RING,\n    width = DEFAULT_PLANE_WIDTH,\n    height = DEFAULT_PLANE_HEIGHT\n  ) {\n    super();\n    this.geometry = new PlaneGeometry(width, height, DEFAULT_PLANE_SEGMENTS);\n    this.material = new MeshBasicMaterial({\n      color,\n      depthTest: false,\n      side: DoubleSide,\n      transparent: true,\n    });\n    this.material.opacity = PICK_PLANE_OPACITY.INACTIVE;\n  }\n}\n","import { BufferGeometry, Float32BufferAttribute, MeshBasicMaterial } from \"three\";\nimport Plane from \"../../primitives/plane\";\nimport {\n  DEFAULT_COLOR_PLANE,\n  DEFAULT_PLANE_HEIGHT,\n  DEFAULT_PLANE_WIDTH,\n} from \"../../utils/constants\";\nimport Line from \"../../primitives/line\";\nimport { PickPlaneGroup } from \"./index\";\n\nexport default class PickPlane extends PickPlaneGroup {\n  /**\n   * @internal\n   */\n  public readonly plane: Plane;\n  /**\n   * @internal\n   */\n  public readonly boundary: Line;\n  /**\n   * @internal\n   */\n  public readonly crossX: Line;\n  /**\n   * @internal\n   */\n  public readonly crossY: Line;\n\n  constructor(\n    color = DEFAULT_COLOR_PLANE,\n    width = DEFAULT_PLANE_WIDTH,\n    height = DEFAULT_PLANE_HEIGHT\n  ) {\n    super();\n    const boundaryGeometry = new BufferGeometry();\n    const crossXGeometry = new BufferGeometry();\n    const crossYGeometry = new BufferGeometry();\n\n    const vertexMaxX = width / 2;\n    const vertexMaxY = height / 2;\n\n    boundaryGeometry.setAttribute(\n      \"position\",\n      new Float32BufferAttribute(\n        [\n          vertexMaxX,\n          vertexMaxY,\n          0,\n          vertexMaxX,\n          -vertexMaxY,\n          0,\n          -vertexMaxX,\n          -vertexMaxY,\n          0,\n          -vertexMaxX,\n          vertexMaxY,\n          0,\n        ],\n        3\n      )\n    );\n\n    crossXGeometry.setAttribute(\n      \"position\",\n      new Float32BufferAttribute([0, vertexMaxY, 0, 0, -vertexMaxY, 0], 3)\n    );\n\n    crossYGeometry.setAttribute(\n      \"position\",\n      new Float32BufferAttribute([-vertexMaxX, 0, 0, vertexMaxX, 0, 0], 3)\n    );\n\n    this.boundary = new Line(color, boundaryGeometry);\n    this.crossX = new Line(\"black\", crossXGeometry);\n    this.crossY = new Line(\"black\", crossYGeometry);\n    this.plane = new Plane(color, width, height);\n\n    this.add(this.plane);\n    this.add(this.boundary);\n    this.add(this.crossX);\n    this.add(this.crossY);\n  }\n\n  /**\n   * @internal\n   */\n  public getInteractiveObjects = () => {\n    return [this.plane];\n  };\n\n  public setColor = (color: string) => {\n    const planeMaterial = this.plane.material as MeshBasicMaterial;\n    const boundaryMaterial = this.boundary.material as MeshBasicMaterial;\n    planeMaterial.color.set(color);\n    boundaryMaterial.color.set(color);\n  };\n}\n","import { Camera, Quaternion, Vector3 } from \"three\";\nimport Rotation from \"./rotation\";\nimport { DEFAULT_COLOR_RING, DEFAULT_RING_RADIUS } from \"../../utils/constants\";\n\n/**\n * @internal\n */\nexport default class RotationEye extends Rotation {\n  public camera: Camera | null = null;\n  private controlsWorldOrientation = new Quaternion();\n  private _temp1 = new Vector3();\n  private _temp2 = new Vector3();\n  private _temp3 = new Quaternion();\n  private worldPosition = new Vector3();\n\n  constructor(color = DEFAULT_COLOR_RING, radius = DEFAULT_RING_RADIUS) {\n    super(color, radius);\n  }\n\n  updateMatrixWorld(force?: boolean): void {\n    if (this.camera !== null) {\n      this.parent?.matrixWorld.decompose(this._temp1, this.controlsWorldOrientation, this._temp2);\n      this.matrixWorld.decompose(this.worldPosition, this._temp3, this._temp2);\n      this.camera\n        .getWorldQuaternion(this.quaternion)\n        .premultiply(this.controlsWorldOrientation.invert());\n      this.camera.getWorldPosition(this.up).sub(this.worldPosition);\n    }\n    super.updateMatrixWorld(force);\n  }\n}\n","export enum EVENTS {\n  DRAG_START = \"DRAG_START\",\n  DRAG = \"DRAG\",\n  DRAG_STOP = \"DRAG_STOP\",\n}\n","import { createNanoEvents } from \"nanoevents\";\nimport { IHandle } from \"../controls/handles\";\nimport { Vector3 } from \"three\";\nimport { EVENTS } from \"./events\";\n\nexport const emitter = createNanoEvents<{\n  [event in EVENTS]: (args: {\n    point: Vector3;\n    handle: IHandle | null;\n    dragRatio?: number;\n  }) => void;\n}>();\n\nexport const unbindAll = () => {\n  for (const event of Object.keys(EVENTS)) {\n    emitter.on(event as EVENTS, () => undefined);\n  }\n  emitter.events = {}\n};\n","export let createNanoEvents = () => ({\n  events: {},\n  emit(event, ...args) {\n    let callbacks = this.events[event] || []\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args)\n    }\n  },\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i)\n    }\n  }\n})\n","export const getPointFromEvent = (event: MouseEvent | TouchEvent) => {\n  let clientX = 0;\n  let clientY = 0;\n  if (event instanceof MouseEvent) {\n    clientX = event.clientX;\n    clientY = event.clientY;\n  } else if (event instanceof TouchEvent) {\n    if (event.touches.length === 0) {\n      return null;\n    }\n    clientX = event.touches[0].clientX;\n    clientY = event.touches[0].clientY;\n  }\n  return { clientX, clientY };\n};\n\nexport const addEventListener = (\n  element: HTMLElement,\n  eventNames: Array<\n    \"pointerdown\" | \"touchstart\" | \"pointerup\" | \"touchend\" | \"pointermove\" | \"touchmove\"\n  >,\n  callback: (event: MouseEvent | TouchEvent) => void,\n  options: { passive?: boolean; capture?: boolean } | boolean = false\n) => {\n  eventNames.forEach((name) => {\n    element.addEventListener(name, callback, options);\n  });\n};\n\nexport const removeEventListener = (\n  element: HTMLElement,\n  eventNames: Array<\n    \"pointerdown\" | \"touchstart\" | \"pointerup\" | \"touchend\" | \"pointermove\" | \"touchmove\"\n  >,\n  callback: (event: MouseEvent | TouchEvent) => void,\n  options: { capture?: boolean } | boolean = false\n) => {\n  eventNames.forEach((name) => {\n    element.removeEventListener(name, callback, options);\n  });\n};\n","import { emitter } from \"./emmiter\";\nimport Controls from \"../controls\";\nimport PickPlane from \"../controls/handles/pick-plane\";\nimport { PICK_PLANE_OPACITY } from \"./constants\";\nimport { IHandle, PickGroup, RotationGroup, TranslationGroup } from \"../controls/handles\";\nimport RotationEye from \"../controls/handles/rotation-eye\";\nimport { addEventListener, getPointFromEvent, removeEventListener } from \"./helper\";\nimport Line from \"../primitives/line\";\nimport * as THREE from \"three\";\nimport { EVENTS } from \"./events\";\n\n/**\n * @internal\n * The Raycaster listens on the mouse and touch events globally and\n * dispatches DRAG_START, DRAG, and DRAG_STOP events.\n */\nexport default class Raycaster extends THREE.Raycaster {\n  private mouse = new THREE.Vector2();\n  private cameraPosition = new THREE.Vector3();\n  private activeHandle: IHandle | null = null;\n  private point = new THREE.Vector3();\n  private visibleHandles: THREE.Object3D[] = [];\n  private visibleControls: THREE.Object3D[] = [];\n  private clientDiagonalLength = 1;\n  private previousScreenPoint = new THREE.Vector2();\n  private currentScreenPoint = new THREE.Vector2();\n  private readonly highlightAxisLine: Line;\n\n  constructor(\n    public camera: THREE.Camera,\n    private domElement: HTMLElement,\n    private controls: { [id: string]: Controls }\n  ) {\n    super();\n    this.highlightAxisLine = this.createAxisLine();\n    /**\n     * mousedown and touchstart are used instead of pointerdown because\n     * pointermove seems to stop firing after some a few events in chrome mobile\n     * this could be because of some capture/passive setting but couldn't find\n     * anything useful. using touch(*) events works.\n     */\n    addEventListener(this.domElement, [\"pointerdown\", \"touchstart\"], this.pointerDownListener, {\n      passive: false,\n      capture: true,\n    });\n    addEventListener(this.domElement, [\"pointerup\", \"touchend\"], this.pointerUpListener, {\n      passive: false,\n      capture: true,\n    });\n  }\n\n  private createAxisLine = () => {\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute(\"position\", new THREE.Float32BufferAttribute([0, 0, -100, 0, 0, 100], 3));\n    return new Line(\"white\", geometry);\n  };\n\n  /**\n   * Find the handle the user clicked on.\n   */\n  private findActiveHandle = (): IHandle | null => {\n    const interactiveObjects: THREE.Object3D[] = [];\n    Object.values(this.controls).map((controls) => {\n      interactiveObjects.push(...controls.getInteractiveObjects());\n    });\n    return this.resolveHandleGroup(super.intersectObjects(interactiveObjects, true)[0]);\n  };\n\n  /**\n   * Find the closest points between two rays.\n   */\n  private findClosestPoints(rayA: THREE.Ray, rayB: THREE.Ray): [THREE.Vector3, THREE.Vector3] {\n    // For accurate description on how to calculate these points see\n    // https://stackoverflow.com/questions/58151978/threejs-how-to-calculate-the-closest-point-on-a-three-ray-to-another-three-ray\n\n    // The line which is formed by the 2 points which are closest to each\n    // another, is normal to the 2 rays.\n    // The first step is to find the direction vector of the line which is\n    // formed by the 2 closest points. Since the vector is normal to both\n    // rays, this can be done by the cross product.\n    const Nv = rayA.direction.clone().cross(rayB.direction);\n    // The next step is to find a plane for eache ray, which includes the\n    // ray and the closest point on the other ray. A plane is formed by 2\n    // vectors, in this case the direction vector of the plane and nv.\n    // We need a different representation of the plane, by a point and a\n    // normal vector. The point is the origin of the ray. The normal vector\n    // again can be get by the cross product. For the further calculations,\n    // this vectors have to be unit vectors (length is 1), so they are\n    // normalized:\n    const Na = rayA.direction.clone().cross(Nv).normalize();\n    const Nb = rayB.direction.clone().cross(Nv).normalize();\n    // Now the issue is the intersection of a ray and plane. ptA and ptB\n    // are Vector3 objects and the closest points on the ray:\n    const Da = rayA.direction.clone().normalize();\n    const Db = rayB.direction.clone().normalize();\n    const da = rayB.origin.clone().sub(rayA.origin).dot(Nb) / Da.dot(Nb);\n    const db = rayA.origin.clone().sub(rayB.origin).dot(Na) / Db.dot(Na);\n    const pointA = rayA.origin.clone().add(Da.multiplyScalar(da));\n    const pointB = rayB.origin.clone().add(Db.multiplyScalar(db));\n\n    return [pointA, pointB];\n  }\n\n  /**\n   * Hide other control instances on drag if asked.\n   */\n  private hideOtherControlsInstancesOnDrag = (activeHandle: IHandle) => {\n    if (activeHandle?.parent) {\n      const controls = activeHandle.parent as Controls;\n      if (controls.hideOtherControlsInstancesOnDrag) {\n        Object.values(this.controls).forEach((x) => {\n          if (x.visible) {\n            this.visibleControls.push(x);\n          }\n          x.visible = false;\n        });\n        controls.visible = true;\n      }\n    }\n  };\n\n  /**\n   * Hide other handles on drag if asked.\n   */\n  private hideOtherHandlesOnDrag = (activeHandle: IHandle) => {\n    if (activeHandle?.parent) {\n      const controls = activeHandle.parent as Controls;\n      if (controls.hideOtherHandlesOnDrag) {\n        controls.children.map((handle) => {\n          if (handle.visible) {\n            this.visibleHandles.push(handle);\n          }\n          handle.visible = false;\n        });\n        activeHandle.visible = true;\n      }\n    }\n  };\n\n  /**\n   * Show the operation axis if asked. Available only for TranslationGroup\n   * and RotationGroup (except RotationEye where plane of rotation is obvious).\n   */\n  private showAxis = (activeHandle: IHandle) => {\n    if (activeHandle?.parent) {\n      const controls = activeHandle.parent as Controls;\n      if (\n        controls.highlightAxis &&\n        (this.activeHandle instanceof TranslationGroup ||\n          this.activeHandle instanceof RotationGroup) &&\n        !(this.activeHandle instanceof RotationEye)\n      ) {\n        //The highlighted axis always passes through the center of the parent object.\n        activeHandle.parent.getWorldPosition(this.highlightAxisLine.position);\n\n        // Find the direction vector of the selected handler, either parallel or up.\n        // Rotate this vector by the parent component world quaternion.\n        // Place the vector at the center of the parent component and calculate\n        // the second point of the highlighted axis.\n        const quaternion = new THREE.Quaternion();\n        activeHandle.parent.getWorldQuaternion(quaternion);\n        let direction: THREE.Vector3;\n        if (this.activeHandle instanceof TranslationGroup) {\n          direction = this.activeHandle.parallel.clone();\n        } else {\n          direction = this.activeHandle.up.clone();\n        }\n        direction.applyQuaternion(quaternion);\n        const point = this.highlightAxisLine.position.clone().add(direction);\n        this.highlightAxisLine.lookAt(point);\n\n        const scene = controls.parent as THREE.Scene;\n        scene.add(this.highlightAxisLine);\n      }\n    }\n  };\n\n  /**\n   * Determine the Active Plane i.e. the plane on which intersection actions\n   * take place. An Active Plane is used during rotation operations.\n   * Mouse movements are translated to points on the Active Plane.\n   */\n  private calculateActivePlane = (activeHandle: IHandle): THREE.Plane => {\n    const activePlane = new THREE.Plane();\n    if (activeHandle?.parent) {\n      const controls = activeHandle.parent as Controls;\n      const eyePlaneNormal = this.getEyePlaneNormal(activeHandle);\n      const normal = new THREE.Vector3();\n      normal.copy(activeHandle instanceof PickGroup ? eyePlaneNormal : activeHandle.up);\n      if (!(activeHandle instanceof RotationEye || activeHandle instanceof PickGroup)) {\n        const quaternion = new THREE.Quaternion();\n        controls.getWorldQuaternion(quaternion);\n        normal.applyQuaternion(quaternion);\n      }\n      if (activeHandle instanceof TranslationGroup) {\n        activePlane.setFromNormalAndCoplanarPoint(normal, activeHandle.position);\n      } else {\n        activePlane.setFromNormalAndCoplanarPoint(normal, controls.position);\n      }\n    }\n    return activePlane;\n  };\n\n  /**\n   * Find the initial point representing the translation, either by intersecting\n   * the view ray with the current active plane, or by calculating the closest\n   * point on the translation axis to the view ray.\n   */\n  private calculateManipulationPoint = (): THREE.Vector3 => {\n    const manipulationPoint = new THREE.Vector3();\n    if (this.activeHandle?.parent) {\n      if (this.activeHandle instanceof PickGroup) {\n        this.activeHandle.getWorldPosition(manipulationPoint);\n      } else if (this.activeHandle instanceof TranslationGroup) {\n        // Translation ray.\n        const axisOrigin = new THREE.Vector3();\n        this.activeHandle.parent.getWorldPosition(axisOrigin);\n        const quaternion = new THREE.Quaternion();\n        this.activeHandle.parent.getWorldQuaternion(quaternion);\n        const axisDirection = this.activeHandle.parallel.clone().applyQuaternion(quaternion);\n        const axisRay = new THREE.Ray(axisOrigin, axisDirection);\n        const point = this.findClosestPoints(this.ray, axisRay)[0];\n        manipulationPoint.copy(point);\n      } else {\n        const activePlane = this.calculateActivePlane(this.activeHandle);\n        if (activePlane) {\n          this.ray.intersectPlane(activePlane, manipulationPoint);\n        }\n      }\n    }\n    return manipulationPoint;\n  };\n\n  /**\n   * This method is executed when the mouse is pressed.\n   */\n  private pointerDownListener = (event: MouseEvent | TouchEvent) => {\n    const point = getPointFromEvent(event);\n\n    // Touches can be empty.\n    if (!point) {\n      return;\n    }\n    const { clientX, clientY } = point;\n    this.setRayDirection(clientX, clientY);\n\n    // Useful for calculating dragRatio (used in dampingFactor calculation).\n    this.clientDiagonalLength = Math.sqrt(\n      (event.target as HTMLElement).clientWidth ** 2 +\n        (event.target as HTMLElement).clientHeight ** 2\n    );\n    this.previousScreenPoint.set(clientX, clientY);\n\n    this.activeHandle = this.findActiveHandle();\n    if (this.activeHandle?.parent) {\n      this.hideOtherControlsInstancesOnDrag(this.activeHandle);\n      this.hideOtherHandlesOnDrag(this.activeHandle);\n\n      if (this.activeHandle instanceof PickPlane) {\n        this.setPickPlaneOpacity(PICK_PLANE_OPACITY.ACTIVE);\n      }\n\n      this.showAxis(this.activeHandle);\n\n      // switch event listeners and dispatch DRAG_START\n      removeEventListener(\n        this.domElement,\n        [\"pointerdown\", \"touchstart\"],\n        this.pointerDownListener,\n        {\n          capture: true,\n        }\n      );\n\n      const initialIntersectionPoint = this.calculateManipulationPoint();\n      emitter.emit(EVENTS.DRAG_START, {\n        point: initialIntersectionPoint,\n        handle: this.activeHandle,\n      });\n      addEventListener(this.domElement, [\"pointermove\", \"touchmove\"], this.pointerMoveListener, {\n        passive: false,\n        capture: true,\n      });\n    }\n  };\n\n  /**\n   * Return the normal of the plane perpendicular to the view direction and\n   * passing by the given object.\n   */\n  private getEyePlaneNormal = (object: THREE.Object3D) => {\n    this.cameraPosition.copy(this.camera.position);\n    return this.cameraPosition.sub(object.position);\n  };\n\n  private setRayDirection = (clientX: number, clientY: number) => {\n    const rect = this.domElement.getBoundingClientRect();\n    const { clientHeight, clientWidth } = this.domElement;\n    this.mouse.x = ((clientX - rect.left) / clientWidth) * 2 - 1;\n    this.mouse.y = -((clientY - rect.top) / clientHeight) * 2 + 1;\n    this.setFromCamera(this.mouse, this.camera);\n  };\n\n  private pointerMoveListener = (event: MouseEvent | TouchEvent) => {\n    if (this.activeHandle === null) {\n      return;\n    }\n    const point = getPointFromEvent(event);\n    if (!point) {\n      return;\n    }\n    const { clientX, clientY } = point;\n\n    this.setRayDirection(clientX, clientY);\n\n    this.point = this.calculateManipulationPoint();\n\n    this.currentScreenPoint.set(clientX, clientY);\n    const distance = this.currentScreenPoint.distanceTo(this.previousScreenPoint);\n    const dragRatio = distance / (this.clientDiagonalLength || 1);\n\n    emitter.emit(EVENTS.DRAG, {\n      point: this.point,\n      handle: this.activeHandle,\n      dragRatio,\n    });\n\n    this.previousScreenPoint.set(clientX, clientY);\n  };\n\n  private pointerUpListener = () => {\n    removeEventListener(this.domElement, [\"pointermove\", \"touchmove\"], this.pointerMoveListener, {\n      capture: true,\n    });\n    addEventListener(this.domElement, [\"pointerdown\", \"touchstart\"], this.pointerDownListener, {\n      passive: false,\n      capture: true,\n    });\n    emitter.emit(EVENTS.DRAG_STOP, { point: this.point, handle: this.activeHandle });\n\n    if (\n      this.activeHandle?.parent &&\n      (this.activeHandle.parent as Controls).hideOtherControlsInstancesOnDrag\n    ) {\n      this.visibleControls.forEach((controls) => {\n        controls.visible = true;\n      });\n      this.visibleControls = [];\n    }\n\n    if (\n      this.activeHandle?.parent &&\n      (this.activeHandle.parent as Controls).hideOtherHandlesOnDrag\n    ) {\n      this.visibleHandles.forEach((handle) => {\n        handle.visible = true;\n      });\n      this.visibleHandles = [];\n    }\n\n    if (this.activeHandle instanceof PickPlane) {\n      this.setPickPlaneOpacity(PICK_PLANE_OPACITY.INACTIVE);\n    }\n\n    const scene = this.activeHandle?.parent?.parent;\n    if (scene) {\n      scene.remove(this.highlightAxisLine);\n    }\n    this.activeHandle = null;\n  };\n\n  private setPickPlaneOpacity(opacity: number) {\n    if (!(this.activeHandle instanceof PickPlane)) {\n      return;\n    }\n    const material = this.activeHandle.plane.material;\n    if (Array.isArray(material)) {\n      material.map((m) => {\n        m.opacity = opacity;\n        m.needsUpdate = true;\n      });\n    } else {\n      material.opacity = opacity;\n      material.needsUpdate = true;\n    }\n  }\n\n  private resolveHandleGroup = (intersectedObject: THREE.Intersection | undefined) => {\n    if (intersectedObject === undefined) {\n      return null;\n    }\n\n    return intersectedObject.object.parent as IHandle;\n  };\n\n  public destroy = () => {\n    this.activeHandle = null;\n    removeEventListener(this.domElement, [\"pointerdown\", \"touchstart\"], this.pointerDownListener, {\n      capture: true,\n    });\n    removeEventListener(this.domElement, [\"pointermove\", \"touchmove\"], this.pointerMoveListener, {\n      capture: true,\n    });\n    removeEventListener(this.domElement, [\"pointerup\", \"touchend\"], this.pointerUpListener, {\n      capture: true,\n    });\n  };\n}\n","import Controls, { IControlsOptions } from \"./controls\";\nimport Raycaster  from \"./utils/raycaster\";\nimport { emitter, unbindAll } from \"./utils/emmiter\";\nimport { DEFAULT_HANDLE_GROUP_NAME } from \"./controls/handles\";\nimport { Camera, Mesh, Object3D } from \"three\";\nimport { EVENTS } from \"./utils/events\";\n\n/**\n * The ControlsManager provides helper functions to create Controls instances\n * and link them up with a Raycaster instance (reused across multiple Controls\n * instances).\n * @noInheritDoc\n */\nexport default class ControlsManager extends Object3D {\n  private objects: { [id: number]: Object3D } = {};\n  private controls: { [id: number]: Controls } = {};\n  private eventListeners: {\n    [event in EVENTS]: Array<\n      (object: Object3D | null, handleName: DEFAULT_HANDLE_GROUP_NAME | string) => void\n    >;\n  } = {\n    [EVENTS.DRAG_START]: [],\n    [EVENTS.DRAG]: [],\n    [EVENTS.DRAG_STOP]: [],\n  };\n  private rayCaster: Raycaster;\n\n  /**\n   * @param camera - the THREE.Camera instance used in the scene\n   * @param domElement - the dom element on which THREE.js renderer is attached,\n   * generally available as `renderer.domElement`\n   */\n  constructor(private camera: Camera, private domElement: HTMLElement) {\n    super();\n    this.rayCaster = new Raycaster(this.camera, this.domElement, this.controls);\n    this.listenToEvents();\n  }\n\n  private listenToEvents = () => {\n    emitter.on(EVENTS.DRAG_START, ({ point, handle }) => {\n      if (handle === null) {\n        return;\n      }\n      const controls = handle.parent as Controls | null;\n      if (controls === null) {\n        return;\n      }\n      controls.processDragStart({ point, handle });\n      this.eventListeners[EVENTS.DRAG_START].map((callback) => {\n        callback(controls.object, handle.name);\n      });\n    });\n\n    emitter.on(EVENTS.DRAG, ({ point, handle, dragRatio }) => {\n      if (handle === null) {\n        return;\n      }\n      const controls = handle.parent as Controls | null;\n      if (controls === null) {\n        return;\n      }\n      controls.processDrag({ point, handle, dragRatio });\n      this.eventListeners[EVENTS.DRAG].map((callback) => {\n        callback(controls.object, handle.name);\n      });\n    });\n\n    emitter.on(EVENTS.DRAG_STOP, ({ handle }) => {\n      if (handle === null) {\n        return;\n      }\n      const controls = handle.parent as Controls | null;\n      if (controls === null) {\n        return;\n      }\n      controls.processDragEnd({ handle });\n      this.eventListeners[EVENTS.DRAG_STOP].map((callback) => {\n        callback(controls.object, handle.name);\n      });\n    });\n  };\n\n  /**\n   * Creates a Controls instance and attaches it to the provided THREE.js object\n   *\n   * @param object - the object provided by the user\n   * @param options\n   */\n  public anchor = (object: Object3D, options?: IControlsOptions) => {\n    const controls = this.addControls(object, options);\n    this.objects[object.id] = object;\n    return controls;\n  };\n\n  /**\n   * Detaches the Controls instance from the provided THREE.js object\n   *\n   * @param object - the object provided by the user\n   * @param controls - the controls instance anchored on the object\n   */\n  public detach = (object: Object3D, controls: Controls) => {\n    if (!Object.prototype.hasOwnProperty.call(this.objects, object.id)) {\n      throw new Error(\"object should be attached first\");\n    }\n    this.remove(controls);\n    this.dispose(controls);\n\n    delete this.objects[object.id];\n    delete this.controls[controls.id];\n  };\n\n  private addControls = (object: Object3D, options?: IControlsOptions) => {\n    const controls = new Controls(object, this.camera, options);\n    this.controls[controls.id] = controls;\n    this.add(controls);\n    return controls;\n  };\n\n  /**\n   * Adds an event listener. Note that there is another method `addEventListener`\n   * on THREE.Object3D from which this class extends but that is specific to the\n   * internals of THREE.js, but not this library\n   * @param event\n   * @param callback - by default the second argument is the default group name\n   * for the Handle involved; for a custom handle, it is the `name` property\n   * set on the handle\n   */\n  public listen = (\n    event: EVENTS,\n    callback: (object: Object3D | null, handleName: DEFAULT_HANDLE_GROUP_NAME | string) => void\n  ): void => {\n    this.eventListeners[event].push(callback);\n  };\n\n  /**\n   * Removes the event listener.\n   * @param event\n   * @param callback\n   */\n  public removeListen = (\n    event: EVENTS,\n    callback: (object: Object3D | null, handleName: DEFAULT_HANDLE_GROUP_NAME | string) => void\n  ): void => {\n    const index = this.eventListeners[event].findIndex((x) => x === callback);\n    if (index !== -1) {\n      this.eventListeners[event].splice(index, 1);\n    }\n  };\n\n  private dispose = (object: Object3D) => {\n    if (object instanceof Mesh) {\n      object.geometry.dispose();\n      if (Array.isArray(object.material)) {\n        object.material.map((material) => material.dispose());\n      } else {\n        object.material.dispose();\n      }\n    }\n    while (object.children.length > 0) {\n      object.children.map((child) => {\n        this.dispose(child);\n        object.remove(child);\n      });\n    }\n  };\n\n  /**\n   * Destroys all Controls instances and removes all event listeners\n   */\n  public destroy = () => {\n    unbindAll();\n\n    const scene = this.parent;\n    if (scene !== null) {\n      scene.remove(this);\n    }\n    this.dispose(this);\n    Object.values(this.controls).map((control) => {\n      this.dispose(control);\n    });\n\n    this.rayCaster.destroy();\n    this.objects = {};\n    this.controls = {};\n    this.eventListeners = {\n      [EVENTS.DRAG_START]: [],\n      [EVENTS.DRAG]: [],\n      [EVENTS.DRAG_STOP]: [],\n    };\n  };\n}\n"],"names":["PICK_PLANE_OPACITY","DEFAULT_COLOR_RING","Cone","Mesh","constructor","color","super","this","geometry","ConeGeometry","material","MeshBasicMaterial","depthTest","transparent","opacity","Line","LineLoop","DEFAULT_HANDLE_GROUP_NAME","ANCHOR_MODE","HandleGroup","Group","TranslationGroup","up","Vector3","RotationGroup","PickGroup","PickPlaneGroup","Translation","parallel","getInteractiveObjects","cone","setColor","coneMaterial","lineMaterial","line","set","lineGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","scale","translateY","add","Octahedron","OctahedronGeometry","side","DoubleSide","Rotation","ringRadius","handlebar","ringMaterial","ring","handlebarMaterial","ringGeometry","angle","Math","PI","vertices","i","ringNumberOfPoints","push","cos","sin","position","y","Pick","octahedron","Plane","width","height","PlaneGeometry","INACTIVE","PickPlane","plane","planeMaterial","boundaryMaterial","boundary","boundaryGeometry","crossXGeometry","crossYGeometry","vertexMaxX","vertexMaxY","crossX","crossY","RotationEye","radius","camera","controlsWorldOrientation","Quaternion","_temp1","_temp2","_temp3","worldPosition","updateMatrixWorld","force","_a","parent","matrixWorld","decompose","getWorldQuaternion","quaternion","premultiply","invert","getWorldPosition","sub","Controls","object","options","handleTargetQuaternion","objectWorldPosition","objectTargetPosition","objectTargetQuaternion","objectParentWorldPosition","objectParentWorldQuaternion","objectParentWorldScale","deltaPosition","normalizedHandleParallelVectorCache","touch1","touch2","boundingSphereRadius","dragStartPoint","dragIncrementalStartPoint","handles","Set","isBeingDraggedTranslation","isBeingDraggedRotation","dampingFactor","initialSelfQuaternion","minTranslationCache","maxTranslationCache","translationLimit","translationAnchor","setupDefaultPickPlane","pickPlaneXY","name","PICK_PLANE_XY","pickPlaneYZ","PICK_PLANE_YZ","pickPlaneZX","PICK_PLANE_ZX","rotateY","rotateX","setupHandle","handle","setupDefaultPick","pick","PICK","setupDefaultEyeRotation","rotationEye","ER","setupDefaultTranslation","translationXP","XPT","translationYP","YPT","translationZP","ZPT","translationXN","XNT","translationYN","YNT","translationZN","ZNT","translateX","translationDistanceScale","translateZ","rotateZ","setupDefaultRotation","rotationX","XR","rotationY","YR","rotationZ","ZR","computeObjectBounds","useComputedBounds","type","computeBoundingSphere","boundingSphere","separation","console","warn","setTranslationLimit","limit","clone","processDragStart","args","point","copy","processDragEnd","x","xSnap","ySnap","z","zSnap","snapTranslation","snap","xyz","toArray","floor","map","ceil","snapFloor","p","index","fromArray","setDampingFactor","MathUtils","clamp","processDrag","dragRatio","k","exp","abs","pow","normalize","applyQuaternion","delta","dot","multiplyScalar","isDampingEnabled","getLimitedTranslation","setFromUnitVectors","mode","FIXED","detachHandleUpdateQuaternionAttach","translation","xLimit","yLimit","zLimit","xAnchor","yAnchor","zAnchor","detachObjectUpdatePositionAttach","scene","Error","attach","showByNames","handleNames","visibility","handleNamesMap","forEach","handleName","undefined","visible","showAll","INHERIT","_b","hideOtherHandlesOnDrag","_d","_c","hideOtherControlsInstancesOnDrag","_f","_e","showHelperPlane","_h","_g","highlightAxis","_k","_j","_m","_l","_p","_o","_r","_q","_t","_s","rotationRadiusScale","_v","_u","eyeRotationRadiusScale","_x","_w","pickPlaneSizeScale","_z","_y","_1","_0","orientation","w","interactiveObjects","EVENTS","emitter","events","emit","event","callbacks","length","on","cb","filter","getPointFromEvent","clientX","clientY","MouseEvent","TouchEvent","touches","addEventListener","element","eventNames","callback","removeEventListener","Raycaster","THREE","domElement","controls","mouse","Vector2","cameraPosition","activeHandle","visibleHandles","visibleControls","clientDiagonalLength","previousScreenPoint","currentScreenPoint","createAxisLine","findActiveHandle","Object","values","resolveHandleGroup","intersectObjects","children","showAxis","highlightAxisLine","direction","lookAt","calculateActivePlane","activePlane","eyePlaneNormal","getEyePlaneNormal","normal","setFromNormalAndCoplanarPoint","calculateManipulationPoint","manipulationPoint","axisOrigin","axisDirection","axisRay","Ray","findClosestPoints","ray","intersectPlane","pointerDownListener","setRayDirection","sqrt","target","clientWidth","clientHeight","setPickPlaneOpacity","ACTIVE","capture","initialIntersectionPoint","DRAG_START","pointerMoveListener","passive","rect","getBoundingClientRect","left","top","setFromCamera","distanceTo","DRAG","pointerUpListener","DRAG_STOP","remove","intersectedObject","destroy","rayA","rayB","Nv","cross","Na","Nb","Da","Db","da","origin","db","Array","isArray","m","needsUpdate","ControlsManager","Object3D","objects","eventListeners","listenToEvents","anchor","addControls","id","detach","prototype","hasOwnProperty","call","dispose","listen","removeListen","findIndex","splice","child","keys","unbindAll","control","rayCaster"],"mappings":"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"}